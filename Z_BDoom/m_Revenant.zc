Class BD_Revenant : BDoomMonster {
	Default {
		species "Revenant";
		Health 300;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 10;
		PainChance 100;
		Monster;
		MeleeThreshold 196;
		+MISSILEMORE 
		+FLOORCLIP
		SeeSound "skeleton/sight";
		PainSound "skeleton/pain";
		DeathSound "skeleton/death";
		ActiveSound "skeleton/active";
		MeleeSound "skeleton/melee";
		HitObituary "$OB_UNDEADHIT";
		Obituary "$OB_UNDEAD";
		Tag "$FN_REVEN";
		gibhealth 60;
	}
	/*void BD_SkelMissile()	{
		if (bdoom_projectiles < 1) {
			A_SkelMissile();
			return;
		}
		if (target == null) 
			return;
		A_FaceTarget();
		AddZ(16);
		Actor missile = SpawnMissile(target, "BD_RevenantTracer"); //spawn modded missile instead of vanilla
		AddZ(-16);
		if (missile != null) {
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}*/
	states {
		Spawn:
			REVI AB 10 A_Look();
			loop;
		See:
			RSKE abcddefghh 2 A_Chase();
			loop;
		Melee:
			TNT1 A 0 A_FaceTarget();
			SSKE A 3 A_SkelWhoosh();
			SSKE B 3;
			SSKE C 3 A_FaceTarget();
			SSKE D 3;
			SSKE E 3 A_SkelFist();
			SSKE D 3;
			goto See;
		Missile:
			TNT1 A 0 A_FaceTarget();
			RMIS a 4 a_facetarget();
			
			TNT1 A 0 A_Jump(128,"MissileLeft");
			RMIR b 3;
			RMIR c 3;
			RMIR d 3 A_SkelMissile;
			RMIR e 3;
			RMIR F 2;
			goto MissileEnd;
		MissileLeft:	
			RMIL b 3;
			RMIL c 3;
			RMIL d 3 A_SkelMissile;
			RMIL e 3;
			RMIL F 2;
			goto MissileEnd;
		MissileEnd:	
			RMIS G 2;
			RMIS H 10 A_facetarget();
			goto See;
		Crush:
			TNT1 A 0 { scale.x *= randompick[bdsfx](-1,1); }
			CRS2 A -1;
			stop;
		Pain:
			REVP a 5;
			REVP b 5 A_Pain();
			goto See;
		Death:
			TNT1 A 0 { 
				scale.x *= randompick[bdsfx](-1,1);
				if (random(1,2) == 2)
					return ResolveState("Death1");
				return ResolveState(null);
			}
			REVM abc 3;
			REVM d 3 a_scream();
			REVM e 2 a_noblocking();
			REVM e 1;
			REVM fghi 3;
			REVM i -1;
			stop;
		Death1:
			REVN abc 3;
			REVN d 4 a_scream();
			REVN e 4 a_noblocking();
			REVN fg 4;
			REVN H -1;
			stop;	
		XDeath:
			TNT1 A 0 { 
				if (random(1,2) == 2)
					return ResolveState("Death");
				scale.x *= randompick[bdsfx](-1,1);
				return ResolveState(null);
			}
			REVX a 3;
			REVX b 3;
			REVX c 2 a_scream();
			REVX d 2 a_noblocking();
			REVX efghij 3;
			REVX k -1;
	}
}


Class BD_RevenantTracer : RevenantTracer {
	private bool istracing;
	void BD_Tracer() {
			if (level.maptime & 3)	
				return;
			istracing = true;
			A_Tracer2(16.875);
	}
	override void Tick () {
		Vector3 oldPos = self.pos;    
		Super.Tick();
		if (!bdoom_debris || bdoom_projectiles < 2 || isFrozen())
			return;
		Vector3 path = level.vec3Diff( self.pos, oldPos );
		double distance = path.length() / 3; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );
		
		for( int i = 0; i < steps; i++ )  {
			if (istracing)
				Spawn("BD_RevenantTrail", oldPos );
			else
				Spawn("BD_TracerTrail", oldPos );
			oldPos = level.vec3Offset( oldPos, direction );
		}
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		A_StartSound("revenant/tracerfly",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING,attenuation:5);
		if (bdoom_debris) {
			let flare = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
			if (flare) {
				flare.master = self;
				flare.fcolor = 'red';
				flare.fscale = 0.12;
				flare.falpha = 0.9;
			}
		}
	}	
	states {
		Spawn:
			SKEB AB 2 {
				if (bdoom_projectiles < 2)
					A_Tracer();
				else
					BD_Tracer();
			}
			goto spawn+1;
		Death:
			TNT1 A 0 {
				A_StopSound(4);
				bFORCEXYBILLBOARD = true;
				alpha = 0.8;
				if(bdoom_debris && bdoom_projectiles == 2) {
					for (int i = random[bdsfx](4,7); i > 0; i--) {
						let a = BD_SmallDebris(Spawn("BD_WallPart",pos+(0,0,1)));
						if (a) {
							a.vel = (frandom(-4,4),frandom(-4,4),frandom(1,5));
							a.A_SetScale(0.28);
							a.removeonfall = true;
						}
					}
				}
			}
			FBXP ABC 3  A_FadeOut(0.1);
			FBXP DEF 4  A_FadeOut(0.1);
			stop;
	}
}

Class BD_RevenantTrail : BD_BaseFlare {
	Default {
		scale 0.08;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
	Spawn:
		BOM6 HIJKLMNOPQRST 1 {
			scale *= 0.9;
		}
		stop;
	}
}

Class BD_TracerTrail : BD_BaseFlare {
	Default {
		BD_BaseFlare.fcolor "red";
		alpha 0.8;
		scale 0.05;
	}
	override void Tick() {
		if (isFrozen())
			return;
		super.Tick();
		A_FadeOut(0.08);
		scale*=0.98;
	}
}
