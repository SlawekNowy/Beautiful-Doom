// Universal flare used by light sources
Class BD_LightFlare : BD_BaseFlare {
	bool flicker;				//whether to flicker
	property flicker : flicker;
	Default {
		BD_BaseDebris.sfxtype "none";
		BD_LightFlare.flicker true;
		+RELATIVETOFLOOR
	}
	override void Tick() {
		if (!master) {
			destroy();
			return;
		}	
		super.tick();
		if (isFrozen() || !bdoom_flames)
			return;
		if (level.time % 5) {
			if (fcolor != 'tech' && fcolor != 'tech2')
				alpha = falpha*frandom(0.7,1.0); //for torches I do flickering by changing the alpha
			else
				A_SetScale(fscale*frandom(0.9,1.0)); //for lamps I change the size of the flare instead (due to different graphics of the flare this looks better)
		}
	}
	override void SetColor() { //see bd.main.zc
		super.SetColor();
		if (fcolor == 'tech2') {
			sprite = GetSpriteIndex("LENS");
			frame = 1;
		}
	}
}



/* 
	BASE LIGHT SOURCE
*/

Class BD_LightSource : Actor abstract {
	BD_LightFlare flare;
	double fspawnheight; 	//flare actor spawn height
	name fcolor;			//torch color and flare actor color (red, green, blue, yellow)
	double fscale;			//flare actor scale
	double falpha;			//flare actor alpha

	property fspawnheight : fspawnheight;
	property fcolor : fcolor;
	property fscale : fscale;
	property falpha : falpha;

	default {
		BD_LightSource.fspawnheight 48;
		BD_LightSource.fscale 0.3;
		BD_LightSource.fcolor 'Red';
		BD_LightSource.falpha 0.4;
		ProjectilePassHeight -16;
		+SOLID
	}	

	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (!flare && bdoom_flames) {
			flare = BD_LightFlare(Spawn("BD_LightFlare",(pos.x,pos.y,pos.z+fspawnheight)));
			flare.master = self;
			flare.fcolor = fcolor;
			flare.falpha = falpha;
			flare.fscale = fscale;
		}
		if (bdoom_flames && flare)
			flare.SetOrigin((pos.x,pos.y,pos.z+fspawnheight),true);
		if (!bdoom_flames && flare)
			flare.destroy();
	}
}

/* 
	BASE TORCH
*/

Class BD_Torch : BD_LightSource abstract {
	int pspawnheight;
	protected string partcolor;
	Default {
		BD_LightSource.fspawnheight 60;
		BD_LightSource.fscale 0.38;
		BD_LightSource.falpha 0.5;
		scale 0.5;
		Radius 16;
		Height 68;
		ProjectilePassHeight -16;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		pspawnheight = fspawnheight;
		partcolor = fcolor;
	}
	virtual void SetLightSprite() {
		if 		(fcolor == 'green')		sprite = GetSpriteIndex("TTRG");
		else if (fcolor == 'blue')		sprite = GetSpriteIndex("TTRB");
		else							sprite = GetSpriteIndex("TTRR");
	}
	void SpawnTorchParticle() {
		if (bdoom_flames && frandom(0,10) > 8.5) {
			/*let fpart = BD_FireParticle(Spawn("BD_FireParticle",(pos.x+frandom(-3,3),pos.y+frandom(-3,3),pos.z+pspawnheight+frandom(10,14))));
			fpart.vel = (frandom(-0.15,0.15),frandom(-0.15,0.15),frandom(0.2,0.5));
			fpart.fcolor = fcolor;*/
			A_SpawnParticle(
				partcolor,
				SPF_FULLBRIGHT|SPF_RELATIVE,
				lifetime:random(25,35),
				size:3,
				angle:random(0,360),
				xoff:frandom(-3,3),yoff:frandom(-3,3),zoff:pspawnheight+frandom(10,14),
				velx:frandom(0.2,0.3),velz:frandom(0.2,0.5),
				accelx:frandom(-0.01,-0.02),accelz:-0.005,
				sizestep:-0.09
			);
		}
	}
	states	{
		Loadsprites:
			TTRG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TTRB ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			TTRR ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			STRG ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			STRB ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
			STRR ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		Spawn:
			TNT1 A 0 NoDelay SetLightSprite();
			#### A 0 A_Jump(256,random(1,25));
		Idle:
			#### ABCDEFGHIJKLMNOPQRSTUVWXYZ random(2,3) SpawnTorchParticle;
			loop;
	}
}

/* 
	TALL TORCHES
*/

Class BD_TallTorch_Green : BD_Torch {
	Default {
		BD_LightSource.fcolor 'green';
	}
}

Class BD_TallTorch_Red : BD_Torch {
	Default {
		BD_LightSource.fcolor 'red';
	}
}

Class BD_TallTorch_Blue : BD_Torch {
	Default {
		BD_LightSource.fcolor 'blue';
	}
}

/* 
	SHORT TORCHES
*/

Class BD_ShortTorch_Green : BD_Torch {
	Default {
		radius 16;
		height 37;
		BD_LightSource.fspawnheight 30;
		BD_LightSource.fscale 0.18;
		scale 0.37;
		BD_LightSource.fcolor 'green';
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		pspawnheight = fspawnheight-7; //due to different shape of the flame on small torches the particles need to spawn a bit lower
	}
	override void SetLightSprite() {
		if (fcolor == 'green')
			sprite = GetSpriteIndex("STRG");
		else if (fcolor == 'blue')
			sprite = GetSpriteIndex("STRB");
		else
			sprite = GetSpriteIndex("STRR");
	}
}

Class BD_ShortTorch_Red : BD_ShortTorch_Green {
	Default {
		BD_LightSource.fcolor 'red';
	}
}

Class BD_ShortTorch_Blue : BD_ShortTorch_Green {
	Default {
		BD_LightSource.fcolor 'blue';
	}
}

/* 
	CANDLE & CANDELABRA
*/

Class BD_Candlestick : BD_LightSource {
	Default {
		BD_LightSource.fspawnheight 12.4;
		BD_LightSource.fscale 0.065;
		BD_LightSource.falpha 0.6;
		BD_LightSource.fcolor 'Yellow';
		Radius 20;
		Height 14;
		scale 0.22;
		-SOLID
	}
	states {
		Spawn:
			BCND A 0 NoDelay A_Jump(256,random(1,10));
		Idle:
			BCND ABCDEFGHIJ random(2,3);
			loop;
	}
}

Class BD_Candelabra : BD_LightSource {
	Default {
		BD_LightSource.fspawnheight 55.5;
		BD_LightSource.fscale 0.045;
		BD_LightSource.falpha 0.6;
		BD_LightSource.fcolor 'cbra'; //candelabra uses special graphics with three flares; easier than actually spawning three and rotating them
		Radius 16;
		Height 60;
		scale 0.19;
	}
	states	{
		Spawn:
			CAN3 A 0 NoDelay A_Jump(256,random(1,10));
		Idle:
			CAN3 ABCDEFGHIJ random(2,3);
			loop;
	}
}

/* 
	BURNING BARREL
*/

Class BD_BurningBarrel : BD_LightSource {
	Default {
		Radius 16;
		Height 32;
		BD_LightSource.fspawnheight 32;
		BD_LightSource.fscale 0.4;
		BD_LightSource.falpha 0.25;
		BD_LightSource.fcolor 'yellow';
		scale 0.6;
	}
	states	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256,random(1,25));
		Idle:
			BURB ABCDEFGHIJKLMNOPQRSTUVWXYZ random(2,3) {
				if (bdoom_flames) {
					A_SpawnItemEx("BD_BurnSmokePiece",frandom(-4,4),frandom(-4,4),fspawnheight+frandom(16,22),frandom(-0.15,0.15),frandom(-0.15,0.15),frandom(0.2,0.35),failchance:210);					//A_SpawnItemEx("BD_BlackSmoke",frandom(-4,4),frandom(-4,4),fspawnheight+frandom(4,10),frandom(-0.15,0.15),frandom(-0.15,0.15),frandom(0.4,0.6)failchance:40);
				}
			}			
			loop;
	}
}

/* 
	TECH LAMPS
*/

Class BD_ElectroSpark : BD_RicochetSpark {
	Default {
		alpha 0.8;
		gravity 0.4;
	}
}

Class BD_BaseLamp : BD_LightSource abstract {
	Default {
		+VULNERABLE
		+NOBLOOD
		+DONTTHRUST
		BD_LightSource.fcolor 'tech'; //lamps also use a separate type of flare with a lens effect
		BD_LightSource.falpha 1.0;
		BD_LightSource.fscale 0.5;
		health 100;
		+DONTFALL
		radius 16;
		height 80;
		deathheight 80;
		deathsound "world/glassbreak";
	}
	/*override void PostBeginPlay() {
		super.PostBeginPlay();
		A_StartSound("lamp/hum",flags:CHANF_DEFAULT|CHANF_LOOPING,attenuation:4);
	}*/
	override void Tick() {
		super.Tick();
		bVULNERABLE = bdoom_killableobjects;
	}
	void LampBreak() {
		if (flare)
			flare.A_SetRenderStyle(falpha,Style_None);
		A_Scream();
		if (!bdoom_debris)
			return;
		for (int i = 10; i > 0; i--)
			A_SpawnItemEx("BD_GlassPiece",frandom(-1.5,1.5),frandom(-1.5,1.5),fspawnheight+frandom(-1.5,1.5),frandom(-5,5),frandom(-5,5),frandom(3,6),failchance:48);
		for (int i = 5; i > 0; i--)
			A_SpawnItemEx("BD_ElectroSpark",frandom(-1.5,1.5),frandom(-1.5,1.5),fspawnheight+frandom(-1.5,1.5),frandom(-2,2),frandom(-2,2),frandom(4,7),failchance:48);
	}
	states	{
		Loadsprites:
			BLMP XY 0;
			BLP2 XY 0;
			BCOL XY 0;
		Death:
			#### X 30 LampBreak();
		Broken:
			#### X 15 {
				if (flare)
					flare.A_SetRenderStyle(falpha,Style_None);
				if (bdoom_flames) {
					if (random(0,10) > 8)
						return ResolveState("Spark");
				}
				return ResolveState(null);
			}
			loop;
		Spark: //lamps destroyed by explosions still flicker, which spawns some sparks, the dynamic light and the flare returns for a bit as well
			#### Y random(5,30) {
				if (flare) {
					flare.A_SetRenderStyle(falpha,Style_Add); //the flare isn't removed/respawned, only its alpha is set to none when the lamp is off
					A_StartSound("world/spark",flags:CHANF_DEFAULT,volume:0.5,attenuation:3);
					if (bdoom_debris) {
						for (int i = 7; i > 0; i--)
							A_SpawnItemEx("BD_ElectroSpark",frandom(-1.5,1.5),frandom(-1.5,1.5),fspawnheight+frandom(-1.5,1.5),frandom(-1,1),frandom(-1,1),frandom(1,3),failchance:48);
					}
				}
			}
			#### # 0 {
				if (flare)
					flare.A_SetRenderStyle(falpha,Style_None);
				return ResolveState("Broken");
			}
			wait;
	}
}

Class BD_Techlamp : BD_BaseLamp {
	Default	{
		Height 80;
		Deathheight 80;
		BD_LightSource.fspawnheight 67;
	}
	states {
		Spawn:
			BLMP ABCD 4;
			Loop;
	}
}

Class BD_Techlamp2 : BD_BaseLamp {
	Default	{
		Height 60;
		Deathheight 60;
		BD_LightSource.fspawnheight 52;
		BD_LightSource.fscale 0.35;
	}
	states	{
		Spawn:
			BLP2 ABCD 4;
			Loop;
	}
}


Class BD_Column : BD_BaseLamp {
	Default {
		Height 48;
		Deathheight 48;
		BD_LightSource.fspawnheight 40;
		BD_LightSource.fscale 0.25;
		BD_LightSource.fcolor 'tech2'; //A variation of "tech" halo with a slight yellow tint to match the sprite
	}
	states	{
		Spawn:
			BCOL A 5;
			Loop;
	}
}