Class BD_Fatso : BDoomMonster {
	Default {
		species "Mancubus";
		Health 600;
		Radius 48;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 80;
		Monster;
		+FLOORCLIP
		+BOSSDEATH
		SeeSound "fatso/sight";
		PainSound "fatso/pain";
		DeathSound "fatso/death";
		ActiveSound "fatso/active";
		Obituary "$OB_FATSO";
		Tag "$FN_MANCU";
		bloodcolor "DarkRed";
		BDoomMonster.smokeheight 24;
	}
	/*void BD_FatAttack1() {
		Class<Actor> proj = (bdoom_projectiles < 1) ? "FatShot" : "BD_FatShot";
		A_FatAttack1(proj);
	}
	void BD_FatAttack2() {
		Class<Actor> proj = (bdoom_projectiles < 1) ? "FatShot" : "BD_FatShot";
		A_FatAttack2(proj);
	}
	void BD_FatAttack3() {
		Class<Actor> proj = (bdoom_projectiles < 1) ? "FatShot" : "BD_FatShot";
		A_FatAttack3(proj);
	}*/
	states {
		Spawn:
			MANC I 15 A_Look;
			loop;
		see:
			MANC abcdefghij 4 a_chase;
			loop;
		Crush:
			CRS3 A -1;
			stop;
		missile:
			FATA a 17 a_fatraise;
			FATA b 3;
			FATA c 3  A_FatAttack1;
			FATA d 3 ;
			FATA e 4;
			FATA a 5 A_FaceTarget;
			FATA A 2 A_FaceTarget;
			FATA b 3;
			FATA c 3  A_FatAttack2;
			FATA d 3 ;
			FATA e 4;
			FATA a 5 A_FaceTarget;
			FATA A 2 A_FaceTarget;
			FATA b 3;
			FATA c 3 A_FatAttack3;
			FATA d 3 ;
			FATA e 4;
			FATA AA 5 A_FaceTarget;
			goto see;
		pain:
			FAPP a 3;
			FAPP b 3 a_pain;
			goto see;
		Death:
			TNT1 A 0 { scale.x *= randompick[bdsfx](-1,1); }
			TNT1 A 0 A_Jump(256,"Death.Vanilla","Death1","Death2");
		Death.Vanilla: //vanilla
			MANM a 3 {
				if (bdoom_gibs && !burning) {
					A_SpawnItemEx("BD_BasicMeatPiece",frandom(-3,3),frandom(-3,3),frandom(44,47), frandom(-4,4),frandom(-4,4),frandom(2,4),0,SXF_SETTARGET,96);
					A_SpawnItemEx("BD_BasicMeatPiece",frandom(-3,3),frandom(-3,3),frandom(44,47), frandom(-4,4),frandom(-4,4),frandom(2,4),0,SXF_SETTARGET,96);
					A_SpawnItemEx("BD_BasicMeatPiece",frandom(-3,3),frandom(-3,3),frandom(44,47), frandom(-4,4),frandom(-4,4),frandom(2,4),0,SXF_SETTARGET,96);
				}
			}
			MANM b 3 {
				if (bdoom_blood && !burning)
					A_SpawnItemEx("Blood",frandom(-3,3),frandom(-3,3),frandom(42,47), frandom(-4,4),frandom(-4,4),frandom(2,4));
				a_Scream();
			}
			MANM cde 3 {
				if (bdoom_blood && !burning)
					A_SpawnItemEx("Blood",frandom(-3,3),frandom(-3,3),frandom(42,47), frandom(-4,4),frandom(-4,4),frandom(2,4));
			}
			MANM f 3 a_noblocking;
			MANM ghijklmnopq 3;
			goto deathbleed;
		Death1: //fall back
			MANN a 4;
			MANN b 4 a_Scream;
			MANN cd 4;
			MANN E 4 {
				if (bdoom_blood && !burning)
					A_SpawnItemEx("Blood",frandom(-3,3),frandom(-3,3),frandom(36,42), frandom(-4,4),frandom(-4,4),frandom(3,6));
				a_noblocking();
			}
			MANN Fghi 4 {
				if (bdoom_blood && !burning)
					A_SpawnItemEx("Blood",frandom(-3,3),frandom(-3,3),frandom(36,42), frandom(-4,4),frandom(-4,4),frandom(3,6));
				if (bdoom_gibs && !burning)
					A_SpawnItemEx("BD_BasicMeatPiece",frandom(-3,3),frandom(-3,3),frandom(20,40), frandom(-4,4),frandom(-4,4),frandom(2,4),0,SXF_SETTARGET,24);
			}
			MANN jkL 4;
			goto deathbleed;
		Death2: //like vanilla but not exposing brain
			MANO a 4;
			MANO b 4 a_Scream();
			MANO cd 4;
			MANO E 4 {
				BD_Bleed();
				a_noblocking();
			}
			MANO FghiJ 4 BD_Bleed();
			goto deathbleed;
		XDeath:
			stop;
	}
}



Class BD_FatShot : FatShot {
	Default {
		+BLOODLESSIMPACT
		Damagetype "Fire";
		decal "BigScorch";
		renderstyle 'add';
		alpha 1.0;
	}
	override void PostBeginPlay () {
		super.PostBeginPlay();
		if (bdoom_debris) {
			let flare = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
			if (flare) {
				flare.master = self;
				if (bdoom_projectiles < 2) {
					flare.fcolor = 'yellow';
					flare.fscale = 0.25;
					flare.falpha = 0.2;
				}
				else {
					flare.fcolor = 'yellow';
					flare.fscale = 0.29;
					flare.falpha = 0.4;
				}
			}
		}
	}
	override void Tick () {
		Vector3 oldPos = self.pos;    
		Super.Tick();
		if (!bdoom_debris || bdoom_projectiles < 2 || isFrozen())
			return;
		Vector3 path = level.vec3Diff( self.pos, oldPos );
		double distance = path.length() / 3; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );
		
		for( int i = 0; i < steps; i++ )  {
			Spawn("BD_FatShotTrail", oldPos );
			oldPos = level.vec3Offset( oldPos, direction );
		}
	}
	States {
		Spawn:
			MANF AB 2;
			loop;
		Death:
			TNT1 A 0 {
				A_RemoveChildren(1,RMVF_EVERYTHING);
				bFORCEXYBILLBOARD = true;
				alpha = 0.85;
				if (bdoom_debris && bdoom_projectiles == 2) {
					for (int i = random[bdsfx](4,8); i > 0; i--) {
						let part = BD_SmallDebris(Spawn("BD_LS_FlameShard",pos + (frandom[bdsfx](-6,6),frandom[bdsfx](-6,6),frandom[bdsfx](-6,6))));
						if (part) {
							part.removeonfall = true;
							part.vel = (frandom[bdsfx](-3,3),frandom[bdsfx](-3,3),frandom[bdsfx](2,7));
						}
					}
				}
			}
			BOM0 ABCDEF 3 bright A_FadeOut(0.1);
			stop;
	}
}

Class BD_FatShotFlare : BD_BaseFlare {
	Default {
		alpha 0.9;
		scale 0.2;
	}
	states {
	Spawn:
		LENR A 0 NoDelay {
			if (master)
				SetOrigin(master.pos,0);
		}
		LENR A 1 {
			A_FadeOut(0.08);
			scale*=0.95;
		}
		wait;
	}
}

Class BD_FatShotTrail : BD_BaseFlare {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
	Spawn:
		BOM3 JKLMNOPQRSTU 1 {
			scale *= 0.9;
			A_FadeOut(0.05);
		}
		stop;
	}
}