class BD_WeaponOverrideHandler : EventHandler {
	override void PlayerDied(PlayerEvent e) {
		if (!bdoom_replaceweapons)
			return;
		PlayerInfo player = players[e.PlayerNumber];
		let psp = player.FindPSPrite(PSP_Weapon);
		if (psp && player) {
			for (int i = 1000; i > 1; i--)
				player.SetPSprite(i,null);
			for (int i = -1000; i < 1; i++)
				player.SetPSprite(i,null);
		}
	}

	// These items have no new visuals and only new pickup sounds, so, I insert them via an event handler, without replacing the actual actors
	override void WorldThingSpawned(WorldEvent e) {
		if (e.thing && e.thing.player && !e.thing.FindInventory("BD_OverlayControl"))
			e.thing.GiveInventory("BD_OverlayControl",1);
		if (!bdoom_replaceitems)
			return;
		if (!(e.thing is "Inventory"))
			return;
		let inv = Inventory(e.thing);
		if (!inv)
			return;
		switch (inv.GetClassName()) {
			case 'Clip' 		: inv.pickupsound = "ammo/clip";			break;
			case 'ClipBox' 	: inv.pickupsound = "ammo/clipbox";		break;
			case 'Shell' 		: inv.pickupsound = "ammo/shells";		break;
			case 'ShellBox' 	: inv.pickupsound = "ammo/shells";		break;
			case 'RocketAmmo' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'RocketBox' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'Cell' 		: inv.pickupsound = "ammo/cells";			break;
			case 'CellPack' 	: inv.pickupsound = "ammo/cells";			break;
			case 'BackPack' 	: inv.pickupsound = "pickups/backpack";	break;
			case 'RadSuit' 	: inv.pickupsound = "pickups/radsuit";	break;
		}
	}

	// Replaces weapons on the map if the appropriate CVAR is true.
	override void CheckReplacement(ReplaceEvent e) {
		if (bdoom_replaceweapons) {
			//e.IsFinal = true;
			switch (e.Replacee.GetClassName()) {
				case 'Fist' 			: e.Replacement = 'BD_Fist'; 				break;
				case 'Berserk' 		: e.Replacement = 'BD_Berserk'; 			break;
				case 'Chainsaw' 		: e.Replacement = 'BD_Chainsaw'; 			break;
				case 'Pistol' 			: e.Replacement = 'BD_Pistol'; 			break;
				case 'Shotgun'			: e.Replacement = 'BD_Shotgun'; 			break;
				case 'SuperShotgun' 	: e.Replacement = 'BD_SuperShotgun';		break;
				case 'Chaingun' 		: e.Replacement = 'BD_Chaingun'; 			break;
				case 'RocketLauncher'	: e.Replacement = 'BD_RocketLauncher'; 	break;
				case 'PlasmaRifle' 	: e.Replacement = 'BD_PlasmaRifle'; 		break;
				case 'BFG9000' 		: e.Replacement = 'BD_BFG9000'; 			break;
			}
		}
	}
		
	/* This override detects if the player received a vanilla weapon directly (e.g. via ACS script)
	and replaces them with one from the mod. It also replaces the starting weapon.
	Initial version provided by Zombie
	*/
	override void WorldTick() {		
		for (int pn = 0; pn < MAXPLAYERS; pn++) {
			if (!playerInGame[pn])
				continue;
			PlayerInfo player	= players[pn];
			PlayerPawn mo		= player.mo;
			if (!player || !mo)
				continue;
			if (!player.readyweapon)
				continue;
			let oldweap = player.pendingweapon.GetClassName();
			let oldweapr = player.readyweapon.GetClassName();
			if (bdoom_replaceweapons) { 
				switch (oldweap) {
					case 'Fist' 			:    player.pendingweapon = GetWeapon(mo, "BD_Fist"			); mo.TakeInventory(oldweap,1); break;
					case 'Chainsaw' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chainsaw"		); mo.TakeInventory(oldweap,1); break;
					case 'Pistol' 			:    player.pendingweapon = GetWeapon(mo, "BD_Pistol"			); mo.TakeInventory(oldweap,1); break;
					case 'Shotgun'			:    player.pendingweapon = GetWeapon(mo, "BD_Shotgun"			); mo.TakeInventory(oldweap,1); break;
					case 'SuperShotgun' 	:    player.pendingweapon = GetWeapon(mo, "BD_SuperShotgun"	); mo.TakeInventory(oldweap,1); break;
					case 'Chaingun' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chaingun"		); mo.TakeInventory(oldweap,1); break;
					case 'RocketLauncher'	:    player.pendingweapon = GetWeapon(mo, "BD_RocketLauncher"	); mo.TakeInventory(oldweap,1); break;
					case 'PlasmaRifle' 	:    player.pendingweapon = GetWeapon(mo, "BD_PlasmaRifle"	); mo.TakeInventory(oldweap,1); break;
					case 'BFG9000' 		:    player.pendingweapon = GetWeapon(mo, "BD_BFG9000"			); mo.TakeInventory(oldweap,1); break;
				}				
				
				switch (oldweapr) {
					case 'Fist' 			:    player.pendingweapon = GetWeapon(mo, "BD_Fist"			); mo.TakeInventory(oldweapr,1); break;
					case 'Chainsaw' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chainsaw"		); mo.TakeInventory(oldweapr,1); break;
					case 'Pistol' 			:    player.pendingweapon = GetWeapon(mo, "BD_Pistol"			); mo.TakeInventory(oldweapr,1); break;
					case 'Shotgun'			:    player.pendingweapon = GetWeapon(mo, "BD_Shotgun"			); mo.TakeInventory(oldweapr,1); break;
					case 'SuperShotgun' 	:    player.pendingweapon = GetWeapon(mo, "BD_SuperShotgun"	); mo.TakeInventory(oldweapr,1); break;
					case 'Chaingun' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chaingun"		); mo.TakeInventory(oldweapr,1); break;
					case 'RocketLauncher'	:    player.pendingweapon = GetWeapon(mo, "BD_RocketLauncher"	); mo.TakeInventory(oldweapr,1); break;
					case 'PlasmaRifle' 	:    player.pendingweapon = GetWeapon(mo, "BD_PlasmaRifle"	); mo.TakeInventory(oldweapr,1); break;
					case 'BFG9000' 		:    player.pendingweapon = GetWeapon(mo, "BD_BFG9000"			); mo.TakeInventory(oldweapr,1); break;
				}				
			}
			else {
			/*
			NOTE: You're NOT supposed to be able to toggle bdoom_replaceweapons whenever you want. You have to restart your game.
			So, the fact that, if you had it enabled and then disabled it, and you ended up having no weapons, is intentional. Doing it any other way
			would cause more issues.
			The part below has only one purpose: if you disable Beautiful Doom Weapons, the block below makes sure they never appear in your inventory.
			You won't receive them with "give all" or "give weapons". Without this section, you wouldn't be able to avoid using Beautifull Doom guns at all.
			*/
				if (mo.FindInventory('BD_Fist'))
					mo.TakeInventory('BD_Fist',1);
				if (mo.FindInventory('BD_Chainsaw'))
					mo.TakeInventory('BD_Chainsaw',1);
				if (mo.FindInventory('BD_Pistol'))
					mo.TakeInventory('BD_Pistol',1);
				if (mo.FindInventory('BD_Shotgun'))
					mo.TakeInventory('BD_Shotgun',1);
				if (mo.FindInventory('BD_SuperShotgun'))
					mo.TakeInventory('BD_SuperShotgun',1);
				if (mo.FindInventory('BD_Chaingun'))
					mo.TakeInventory('BD_Chaingun',1);
				if (mo.FindInventory('BD_RocketLauncher'))
					mo.TakeInventory('BD_RocketLauncher',1);
				if (mo.FindInventory('BD_PlasmaRifle'))
					mo.TakeInventory('BD_PlasmaRifle',1);
				if (mo.FindInventory('BD_BFG9000'))
					mo.TakeInventory('BD_BFG9000',1);
			}
		}
	}
	// Courtesy of Zombie
	private Weapon GetWeapon(PlayerPawn mo, Class<Weapon> type) {
		let weap = Weapon(mo.FindInventory(type));
		if (weap)
			return weap;
		else
			return Weapon(mo.GiveInventoryType(type));
	}
}

/* Simply replaces actors with modded ones if the appropriate CVAR is true.
Helps to keep the mod compatible with other actor-replacing mods. 
Separate CVARs for each monsters are also supported. */

class BD_ActorOverrideHandler : EventHandler {
	/*	This function is designed to avoid replacing actors that are defined in DEHACKED or their sprites are replaced directly.
		With max compatibility it'll check sprite names in the archives loaded in the game: if it finds that the same sprite lump appears
		more than once, we conclude that one of the archives replaces said sprite directly, and probably for a good reason.
		If that's the case, we'll let the original actor spawn instead of the Beautiful Doom version. This is important for mapsets
		such as Deus Vult 2, which use a lot of custom decorations with vanilla sprite names.
		Then it'll check for DEHACKED definition (DEHACKED checker by 3saster).
		All of this only happens if bdoom_safereplacement CVAR is true (default); otherwise replacement is forced.
	*/
	bool CheckVanillaReplacement (name classname = "", string lumpname = "") {
		if (bdoom_safereplacement <= 0)
			return false;
		if (bdoom_safereplacement >= 1 && classname) {
			let event = BD_DEHACKED_Handler(StaticEventHandler.Find("BD_DEHACKED_Handler"));
			if (event && event.IsDehacked(classname))
				return true;
		}
		if (bdoom_safereplacement >= 2 && lumpname) {
			int firstLump = Wads.FindLump(lumpname,0,1);
			int nextLump =  Wads.FindLump(lumpname,firstLump +1,1);
			if(nextLump != -1)
				return true;
		}
		return false;
	}
	/*
	// This replaces gore texures (SP_DUDEs) with custom gore textures based on Beautiful gore decorations (if decorations are replaced too)
	static const name BD_SP_DUDE1[] = { "textures/BD_DUDE1a.png", "textures/BD_DUDE1b.png" };
	static const name BD_SP_DUDE2[] = { "textures/BD_DUDE2a.png", "textures/BD_DUDE2b.png" };
	static const name BD_SP_DUDE4[] = { "textures/BD_DUDE4a.png", "textures/BD_DUDE4b.png", "textures/BD_DUDE4c.png" };
	static const name BD_SP_DUDE5[] = { "textures/BD_DUDE5a.png", "textures/BD_DUDE5b.png", "textures/BD_DUDE5c.png", "textures/BD_DUDE5d.png" };
	static const name BD_SP_DUDE7[] = { "textures/BD_DUDE7a.png", "textures/BD_DUDE7b.png", "textures/BD_DUDE7c.png" };
	static const name BD_SP_DUDE8[] = { "textures/BD_DUDE8a.png", "textures/BD_DUDE8b.png", "textures/BD_DUDE8c.png" };
	override void WorldLoaded(WorldEvent e) {
		if (bdoom_replaceobjects) {
			level.ReplaceTextures("SP_DUDE1", BD_SP_DUDE1[random(0,1)],0);
			level.ReplaceTextures("SP_DUDE2", BD_SP_DUDE2[random(0,1)],0);
			level.ReplaceTextures("SP_DUDE4", BD_SP_DUDE4[random(0,2)],0);
			level.ReplaceTextures("SP_DUDE5", BD_SP_DUDE5[random(0,3)],0);
			level.ReplaceTextures("SP_DUDE7", BD_SP_DUDE7[random(0,2)],0);
			level.ReplaceTextures("SP_DUDE8", BD_SP_DUDE8[random(0,2)],0);
		}
	}*/
	
	// This performs the actual conditional actor replacement:
	override void CheckReplacement(ReplaceEvent e) {
		if (bdoom_blood) {	
			switch (e.Replacee.GetClassName()) {
				case 'Blood' : 				e.Replacement = 'BD_Blood'; 	break;
				case 'BloodSplatter' : 		e.Replacement = 'BD_Blood'; 	break;
				case 'AxeBlood' : 				e.Replacement = 'BD_BloodSpurt'; 	break;
			}
		}
		if (bdoom_replacemonsters) {
			//e.IsFinal = true;
			let monst = e.Replacee.GetClassName();
			switch (monst) {
				case 'Zombieman' 			: if (!CheckVanillaReplacement(monst/*, "POSSA1"*/) && bdoom_Zombieman) 			e.Replacement = 'BD_Zombieman'; 			break;
				case 'ShotgunGuy' 			: if (!CheckVanillaReplacement(monst/*, "SPOSA1"*/) && bdoom_ShotgunGuy) 		e.Replacement = 'BD_ShotgunGuy'; 			break;
				case 'ChaingunGuy' 		: if (!CheckVanillaReplacement(monst/*, "CPOSA1"*/) && bdoom_ChaingunGuy) 		e.Replacement = 'BD_ChaingunGuy'; 		break;
				case 'WolfensteinSS'		: if (!CheckVanillaReplacement(monst/*, "SSWVA1"*/) && bdoom_WolfensteinSS) 		e.Replacement = 'BD_WolfensteinSS'; 		break;
				case 'DoomImp' 			: if (!CheckVanillaReplacement(monst/*, "TROOA1"*/) && bdoom_DoomImp) 			e.Replacement = 'BD_DoomImp'; 			break;
				case 'Demon' 				: if (!CheckVanillaReplacement(monst/*, "SARGA1"*/) && bdoom_Demon) 				e.Replacement = 'BD_Demon'; 				break;
				case 'Spectre' 			: if (!CheckVanillaReplacement(monst/*, "SARGA1"*/) && bdoom_Spectre) 			e.Replacement = 'BD_Spectre'; 			break;
				case 'Cacodemon' 			: if (!CheckVanillaReplacement(monst/*, "HEADA1"*/) && bdoom_Cacodemon) 			e.Replacement = 'BD_Cacodemon'; 			break;
				case 'PainElemental'		: if (!CheckVanillaReplacement(monst/*, "PAINA1"*/) && bdoom_PainElemental) 		e.Replacement = 'BD_PainElemental'; 		break;
				case 'LostSoul'			: if (!CheckVanillaReplacement(monst/*, "SKULA1"*/) && bdoom_LostSoul) 			e.Replacement = 'BD_LostSoul'; 			break;
				case 'Revenant' 			: if (!CheckVanillaReplacement(monst/*, "SKELA1"*/) && bdoom_Revenant) 			e.Replacement = 'BD_Revenant'; 			break;
				case 'Arachnotron' 		: if (!CheckVanillaReplacement(monst/*, "BSPIA1"*/) && bdoom_Arachnotron) 		e.Replacement = 'BD_Arachnotron'; 		break;
				case 'Fatso' 				: if (!CheckVanillaReplacement(monst/*, "FATTA1"*/) && bdoom_Fatso) 				e.Replacement = 'BD_Fatso'; 				break;
				case 'HellKnight' 			: if (!CheckVanillaReplacement(monst/*, "BOS2A1"*/) && bdoom_HellKnight) 		e.Replacement = 'BD_HellKnight'; 			break;
				case 'BaronOfHell' 		: if (!CheckVanillaReplacement(monst/*, "BOSSA1"*/) && bdoom_BaronOfHell) 		e.Replacement = 'BD_BaronOfHell'; 		break;
				case 'ArchVile' 			: if (!CheckVanillaReplacement(monst/*, "VILEA1"*/) && bdoom_ArchVile) 			e.Replacement = 'BD_ArchVile'; 			break;
				case 'Cyberdemon' 			: if (!CheckVanillaReplacement(monst/*, "CYBRA1"*/) && bdoom_Cyberdemon) 		e.Replacement = 'BD_Cyberdemon'; 			break;
				case 'SpiderMastermind' 	: if (!CheckVanillaReplacement(monst/*, "SPIDA1"*/) && bdoom_SpiderMastermind) 	e.Replacement = 'BD_SpiderMastermind';	break;
				case 'BossBrain' 			: if (!CheckVanillaReplacement(monst/*, "BBRNA0"*/) && bdoom_IconOfSin) 			e.Replacement = 'BD_BossBrain';			break;
				case 'SpawnShot' 			: if (!CheckVanillaReplacement(monst/*, "BOSFA0"*/) && bdoom_IconOfSin) 			e.Replacement = 'BD_SpawnShot';			break;
			//decorative corpses:
				case 'DeadZombieman' 		: if (!CheckVanillaReplacement(monst, "POSSL0") && bdoom_Zombieman) 			e.Replacement = 'BD_DeadZombieman'; 		break;
				case 'DeadShotgunGuy' 	: if (!CheckVanillaReplacement(monst, "SPOSL0") && bdoom_ShotgunGuy) 		e.Replacement = 'BD_DeadShotgunGuy'; 		break;
				case 'DeadDoomImp' 		: if (!CheckVanillaReplacement(monst, "TROOM0") && bdoom_DoomImp) 			e.Replacement = 'BD_DeadDoomImp'; 		break;
				case 'DeadDemon' 			: if (!CheckVanillaReplacement(monst, "SARGN0") && bdoom_Demon) 				e.Replacement = 'BD_DeadDemon'; 			break;
				case 'DeadCacodemon' 		: if (!CheckVanillaReplacement(monst, "HEADL0") && bdoom_Cacodemon) 			e.Replacement = 'BD_DeadCacodemon'; 		break;
				case 'DeadLostSoul'		: if (!CheckVanillaReplacement(monst) && bdoom_LostSoul) 			e.Replacement = 'BD_DeadLostSoul'; 		break;
			}
		}
		if (bdoom_replaceitems) {
			//e.IsFinal = true;
			name itm = e.Replacee.GetClassName();
			switch (itm) {
				case 'Blursphere' 				: e.Replacement = 'BD_Blursphere'; 				break;
				case 'Soulsphere' 				: e.Replacement = 'BD_Soulsphere'; 				break;
				case 'Megasphere' 				: e.Replacement = 'BD_Megasphere'; 				break;
				case 'InvulnerabilitySphere' 	: e.Replacement = 'BD_InvulnerabilitySphere'; 	break;
				case 'Allmap' 					: e.Replacement = 'BD_Allmap'; 					break;
				case 'Infrared' 				: e.Replacement = 'BD_Infrared'; 					break;
				case 'HealthBonus' 			: e.Replacement = 'BD_HealthBonus'; 				break;
				case 'ArmorBonus' 				: e.Replacement = 'BD_ArmorBonus'; 				break;
				case 'Stimpack' 				: e.Replacement = 'BD_Stimpack'; 					break;
				case 'Medikit' 				: e.Replacement = 'BD_Medikit'; 					break;
				case 'GreenArmor' 				: e.Replacement = 'BD_GreenArmor'; 				break;
				case 'BlueArmor' 				: e.Replacement = 'BD_BlueArmor'; 				break;
				case 'RedCard' 				: e.Replacement = 'BD_RedCard'; 					break;
				case 'BlueCard' 				: e.Replacement = 'BD_BlueCard'; 					break;
				case 'YellowCard' 				: e.Replacement = 'BD_YellowCard'; 				break;
				case 'RedSkull' 				: e.Replacement = 'BD_RedSkull'; 					break;
				case 'BlueSkull' 				: e.Replacement = 'BD_BlueSkull'; 				break;
				case 'YellowSkull' 			: e.Replacement = 'BD_YellowSkull'; 				break;
			}
		}
		if (bdoom_replaceobjects) {
			//e.IsFinal = true;
			name obj = e.Replacee.GetClassName();
			switch (obj) {
					//VICTIMS
				Case 'HangTLookingDown' 	: if (!CheckVanillaReplacement(obj,"HDB3A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTLookingUp' 	: if (!CheckVanillaReplacement(obj,"HDB5A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTNoBrain' 		: if (!CheckVanillaReplacement(obj,"HDB6A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTSkull' 			: if (!CheckVanillaReplacement(obj,"HDB4A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangBNoBrain' 		: if (!CheckVanillaReplacement(obj,"HDB2A0"))	e.Replacement = 'BD_HangingBody'; 		break;
				Case 'HangNoGuts' 			: if (!CheckVanillaReplacement(obj,"HDB1A0"))	e.Replacement = 'BD_HangingBody'; 		break;
				Case 'BloodyTwitch'		: if (!CheckVanillaReplacement(obj,"GOR1A0"))	e.Replacement = 'BD_BloodyTwitch'; 		break;
				Case 'NonSolidTwitch'		: if (!CheckVanillaReplacement(obj,"GOR1A0"))	e.Replacement = 'BD_NonsolidTwitch'; 		break;				
				Case 'Meat2'				: if (!CheckVanillaReplacement(obj,"GOR2A0"))	e.Replacement = 'BD_Meat2'; 				break;
				Case 'Meat3'				: if (!CheckVanillaReplacement(obj,"GOR3A0"))	e.Replacement = 'BD_Meat3'; 				break;
				Case 'Meat4'				: if (!CheckVanillaReplacement(obj,"GOR4A0"))	e.Replacement = 'BD_Meat4'; 				break;
				Case 'Meat5'				: if (!CheckVanillaReplacement(obj,"GOR5A0"))	e.Replacement = 'BD_Meat5'; 				break;				
				Case 'NonsolidMeat2'		: if (!CheckVanillaReplacement(obj,"GOR2A0"))	e.Replacement = 'BD_NonsolidMeat2'; 		break;
				Case 'NonsolidMeat3'		: if (!CheckVanillaReplacement(obj,"GOR3A0"))	e.Replacement = 'BD_NonsolidMeat3'; 		break;
				Case 'NonsolidMeat4'		: if (!CheckVanillaReplacement(obj,"GOR4A0"))	e.Replacement = 'BD_NonsolidMeat4';		break;
				Case 'NonsolidMeat5'		: if (!CheckVanillaReplacement(obj,"GOR5A0"))	e.Replacement = 'BD_NonsolidMeat5';		break;
				Case 'DeadStick'			: if (!CheckVanillaReplacement(obj,"POL1A0"))	e.Replacement = 'BD_DeadStick';			break;
				Case 'LiveStick'			: if (!CheckVanillaReplacement(obj,"POL6A0"))	e.Replacement = 'BD_LiveStick';			break;
				Case 'HeadOnAStick'		: if (!CheckVanillaReplacement(obj,"POL4A0"))	e.Replacement = 'BD_HeadOnAStick';		break;
				Case 'HeadsOnAStick'		: if (!CheckVanillaReplacement(obj,"POL2A0"))	e.Replacement = 'BD_HeadsOnAStick';		break;
				Case 'ColonGibs'			: if (!CheckVanillaReplacement(obj,"POB1A0") && bdoom_gibs)	e.Replacement = 'BD_ColonGibs';		break;
				Case 'SmallBloodPool'		: if (!CheckVanillaReplacement(obj,"POB2A0") && bdoom_blood)	e.Replacement = 'BD_SmallBloodPool';	break;
					//MISC
				case 'TeleportFog' 		: if (!CheckVanillaReplacement(obj,"HDB5A0"))	e.Replacement = 'BD_TeleportFog';			break;
				case 'ExplosiveBarrel' 	: if (!CheckVanillaReplacement(obj,"HDB5A0"))	e.Replacement = 'BD_ExplosiveBarrel';		break;
				case 'EvilEye' 			: if (!CheckVanillaReplacement(obj,"CEYEA0"))	e.Replacement = 'BD_EvilEye';				break;
				case 'FloatingSkull' 		: if (!CheckVanillaReplacement(obj,"FSKUA0"))	e.Replacement = 'BD_FloatingSkull';		break;
				case 'HeartColumn' 		: if (!CheckVanillaReplacement(obj,"COL5A0"))	e.Replacement = 'BD_HeartColumn';			break;
				case 'BigTree' 			: if (!CheckVanillaReplacement(obj,"TRE2A0"))	e.Replacement = 'BD_BigTree';				break;
				case 'TorchTree' 			: if (!CheckVanillaReplacement(obj,"TRE1A0"))	e.Replacement = 'BD_TorchTree';			break;
					//LIGHTS
				case 'GreenTorch' 			: if (!CheckVanillaReplacement(obj,"TGRNA0"))	e.Replacement = 'BD_TallTorch_Green';		break;
				case 'RedTorch' 			: if (!CheckVanillaReplacement(obj,"TREDA0"))	e.Replacement = 'BD_TallTorch_Red';			break;
				case 'BlueTorch' 			: if (!CheckVanillaReplacement(obj,"TBLUA0"))	e.Replacement = 'BD_TallTorch_Blue';			break;
				case 'ShortGreenTorch'	: if (!CheckVanillaReplacement(obj,"SMGTA0"))	e.Replacement = 'BD_ShortTorch_Green';		break;
				case 'ShortRedTorch' 		: if (!CheckVanillaReplacement(obj,"SMRTA0"))	e.Replacement = 'BD_ShortTorch_Red';			break;
				case 'ShortBlueTorch' 	: if (!CheckVanillaReplacement(obj,"SMBTA0"))	e.Replacement = 'BD_ShortTorch_Blue';		break;
				case 'Candlestick' 		: if (!CheckVanillaReplacement(obj,"CANDA0"))	e.Replacement = 'BD_Candlestick';			break;
				case 'Candelabra' 			: if (!CheckVanillaReplacement(obj,"CBRAA0"))	e.Replacement = 'BD_Candelabra';			break;
				case 'BurningBarrel' 		: if (!CheckVanillaReplacement(obj,"FCANA0"))	e.Replacement = 'BD_BurningBarrel';		break;
				case 'Techlamp' 			: if (!CheckVanillaReplacement(obj,"TLMPA0"))	e.Replacement = 'BD_Techlamp';				break;
				case 'Techlamp2' 			: if (!CheckVanillaReplacement(obj,"TLP2A0"))	e.Replacement = 'BD_Techlamp2';			break;
				case 'Column' 				: if (!CheckVanillaReplacement(obj,"COLUA0"))	e.Replacement = 'BD_Column';				break;
			}
		}
	}
	//  This override tells the game which of the original monsters the modded monster replaces. Necessary for "hardcoded" effects such as Map07 or E1M8
	override void Checkreplacee(ReplacedEvent e) {
		if (!bdoom_replacemonsters)
			return;
		name monst = e.Replacement.GetClassName();
		switch (monst) {
			case 'BD_Zombieman' 			: if (bdoom_Zombieman) 			e.Replacee = 'Zombieman'; 			break;
			case 'BD_ShotgunGuy' 			: if (bdoom_ShotgunGuy) 			e.Replacee = 'ShotgunGuy'; 		break;
			case 'BD_ChaingunGuy' 		: if (bdoom_ChaingunGuy) 			e.Replacee = 'ChaingunGuy'; 		break;
			case 'BD_WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacee = 'WolfensteinSS'; 	break;
			case 'BD_DoomImp' 				: if (bdoom_DoomImp) 				e.Replacee = 'DoomImp'; 			break;
			case 'BD_Demon' 				: if (bdoom_Demon) 				e.Replacee = 'Demon'; 				break;
			case 'BD_Spectre' 				: if (bdoom_Spectre) 				e.Replacee = 'Spectre'; 			break;
			case 'BD_Cacodemon' 			: if (bdoom_Cacodemon) 			e.Replacee = 'Cacodemon'; 			break;
			case 'BD_PainElemental'		: if (bdoom_PainElemental) 		e.Replacee = 'PainElemental'; 	break;
			case 'BD_LostSoul'				: if (bdoom_LostSoul) 			e.Replacee = 'LostSoul'; 			break;
			case 'BD_Revenant' 			: if (bdoom_Revenant) 			e.Replacee = 'Revenant'; 			break;
			case 'BD_Arachnotron' 		: if (bdoom_Arachnotron) 			e.Replacee = 'Arachnotron'; 		break;
			case 'BD_Fatso' 				: if (bdoom_Fatso) 				e.Replacee = 'Fatso'; 				break;
			case 'BD_HellKnight' 			: if (bdoom_HellKnight) 			e.Replacee = 'HellKnight'; 		break;
			case 'BD_BaronOfHell' 		: if (bdoom_BaronOfHell) 			e.Replacee = 'BaronOfHell'; 		break;
			case 'BD_ArchVile' 			: if (bdoom_ArchVile) 			e.Replacee = 'ArchVile'; 			break;
			case 'BD_Cyberdemon' 			: if (bdoom_Cyberdemon) 			e.Replacee = 'Cyberdemon'; 		break;
			case 'BD_SpiderMastermind'	: if (bdoom_SpiderMastermind) 	e.Replacee = 'SpiderMastermind';	break;
			case 'BD_BossBrain' 			: if (bdoom_IconOfSin) 			e.Replacee = 'BossBrain';			break;
			case 'BD_SpawnShot' 			: if (bdoom_IconOfSin) 			e.Replacee = 'SpawnShot';			break;
		}
	}
}

Class BD_LiquidTexturesHandler : EventHandler {
	private bool bd_liquidtex;
	private bool bd_goretex;
	override void WorldTick() {
		if (level.time % 35 == 0)
			return;
		if (bd_liquidtex != bdoom_liquidtextures)
			BD_ReplaceLiquidTextures();
		bd_liquidtex = bdoom_liquidtextures;
		if (bd_goretex != bdoom_goretextures)
			BD_ReplaceGoreTextures();
		bd_goretex = bdoom_goretextures;
	}
	void BD_ReplaceTextures(string from, string to, int surface = 0) {
		int tex1 = int(TexMan.CheckForTexture(from, TexMan.Type_Any, TexMan.TryAny));
		if (tex1 < 0)
			return;
		int tex2 = int (TexMan.CheckForTexture(to, TexMan.Type_Any, TexMan.TryAny));
		if (tex2 < 0)
			return;
		if (surface >= 2)
			level.ReplaceTextures(from, to, TexMan.NOT_FLOOR|TexMan.NOT_CEILING);
		else if (surface == 1)
			level.ReplaceTextures(from, to, TexMan.NOT_BOTTOM|TexMan.NOT_MIDDLE|TexMan.NOT_TOP);
		else
			level.ReplaceTextures(from, to, 0);
	}
	// This replaces gore texures (SP_DUDEs) with custom gore textures based on Beautiful gore decorations (if decorations are replaced too)
	static const name BD_SP_DUDE1[] = { "textures/BD_DUDE1a.png", "textures/BD_DUDE1b.png" };
	static const name BD_SP_DUDE2[] = { "textures/BD_DUDE2a.png", "textures/BD_DUDE2b.png" };
	static const name BD_SP_DUDE4[] = { "textures/BD_DUDE4a.png", "textures/BD_DUDE4b.png", "textures/BD_DUDE4c.png" };
	static const name BD_SP_DUDE5[] = { "textures/BD_DUDE5a.png", "textures/BD_DUDE5b.png", "textures/BD_DUDE5c.png", "textures/BD_DUDE5d.png" };
	static const name BD_SP_DUDE7[] = { "textures/BD_DUDE7a.png", "textures/BD_DUDE7b.png", "textures/BD_DUDE7c.png" };
	static const name BD_SP_DUDE8[] = { "textures/BD_DUDE8a.png", "textures/BD_DUDE8b.png", "textures/BD_DUDE8c.png" };
	void BD_ReplaceGoreTextures() {
		if (bdoom_goretextures) {
			level.ReplaceTextures("SP_DUDE1", BD_SP_DUDE1[random(0,1)],0);
			level.ReplaceTextures("SP_DUDE2", BD_SP_DUDE2[random(0,1)],0);
			level.ReplaceTextures("SP_DUDE4", BD_SP_DUDE4[random(0,2)],0);
			level.ReplaceTextures("SP_DUDE5", BD_SP_DUDE5[random(0,3)],0);
			level.ReplaceTextures("SP_DUDE7", BD_SP_DUDE7[random(0,2)],0);
			level.ReplaceTextures("SP_DUDE8", BD_SP_DUDE8[random(0,2)],0);
		}
		else {
			level.ReplaceTextures("textures/BD_DUDE1a.png", "SP_DUDE1",0);
			level.ReplaceTextures("textures/BD_DUDE1b.png", "SP_DUDE1",0);
			level.ReplaceTextures("textures/BD_DUDE2a.png", "SP_DUDE2",0);
			level.ReplaceTextures("textures/BD_DUDE2b.png", "SP_DUDE2",0);
			level.ReplaceTextures("textures/BD_DUDE4a.png", "SP_DUDE4",0);
			level.ReplaceTextures("textures/BD_DUDE4b.png", "SP_DUDE4",0);
			level.ReplaceTextures("textures/BD_DUDE4c.png", "SP_DUDE4",0);
			level.ReplaceTextures("textures/BD_DUDE5a.png", "SP_DUDE5",0);
			level.ReplaceTextures("textures/BD_DUDE5b.png", "SP_DUDE5",0);
			level.ReplaceTextures("textures/BD_DUDE5c.png", "SP_DUDE5",0);
			level.ReplaceTextures("textures/BD_DUDE5d.png", "SP_DUDE5",0);
			level.ReplaceTextures("textures/BD_DUDE7a.png", "SP_DUDE7",0);
			level.ReplaceTextures("textures/BD_DUDE7b.png", "SP_DUDE7",0);
			level.ReplaceTextures("textures/BD_DUDE7c.png", "SP_DUDE7",0);
			level.ReplaceTextures("textures/BD_DUDE8a.png", "SP_DUDE8",0);
			level.ReplaceTextures("textures/BD_DUDE8b.png", "SP_DUDE8",0);
			level.ReplaceTextures("textures/BD_DUDE8c.png", "SP_DUDE8",0);
		}			
	}
	void BD_ReplaceLiquidTextures() {
		if (bdoom_liquidtextures) {
			//lava
			BD_ReplaceTextures("LFALL1","BDT_LFA1",surface: 2);
			BD_ReplaceTextures("LFALL2","BDT_LFA1",surface: 2);
			BD_ReplaceTextures("LFALL3","BDT_LFA1",surface: 2);
			BD_ReplaceTextures("LFALL4","BDT_LFA1",surface: 2);
			BD_ReplaceTextures("LAVA1","BDT_LFA2",surface: 2);
			BD_ReplaceTextures("LAVA2","BDT_LFA2",surface: 2);
			BD_ReplaceTextures("LAVA3","BDT_LFA2",surface: 2);
			BD_ReplaceTextures("LAVA4","BDT_LFA2",surface: 2);
			BD_ReplaceTextures("LAVA1","BDT_LFL",surface: 1);
			BD_ReplaceTextures("LAVA2","BDT_LFL",surface: 1);
			BD_ReplaceTextures("LAVA3","BDT_LFL",surface: 1);
			BD_ReplaceTextures("LAVA4","BDT_LFL",surface: 1);
			//water
			BD_ReplaceTextures("WFALL1","BDT_WFA1",surface: 2);
			BD_ReplaceTextures("WFALL2","BDT_WFA1",surface: 2);
			BD_ReplaceTextures("WFALL3","BDT_WFA1",surface: 2);
			BD_ReplaceTextures("WFALL4","BDT_WFA1",surface: 2);
			BD_ReplaceTextures("FWATER1","BDT_WFA2",surface: 2);
			BD_ReplaceTextures("FWATER2","BDT_WFA2",surface: 2);
			BD_ReplaceTextures("FWATER3","BDT_WFA2",surface: 2);
			BD_ReplaceTextures("FWATER4","BDT_WFA2",surface: 2);
			BD_ReplaceTextures("FWATER1","BDT_WFL",surface: 1);
			BD_ReplaceTextures("FWATER2","BDT_WFL",surface: 1);
			BD_ReplaceTextures("FWATER3","BDT_WFL",surface: 1);
			BD_ReplaceTextures("FWATER4","BDT_WFL",surface: 1);
			//blood
			BD_ReplaceTextures("BFALL1","BDT_BFA1",surface: 2);
			BD_ReplaceTextures("BFALL2","BDT_BFA1",surface: 2);
			BD_ReplaceTextures("BFALL3","BDT_BFA1",surface: 2);
			BD_ReplaceTextures("BFALL4","BDT_BFA1",surface: 2);
			BD_ReplaceTextures("BLOOD1","BDT_BFA2",surface: 2);
			BD_ReplaceTextures("BLOOD2","BDT_BFA2",surface: 2);
			BD_ReplaceTextures("BLOOD3","BDT_BFA2",surface: 2);
			BD_ReplaceTextures("BLOOD4","BDT_BFA2",surface: 2);
			BD_ReplaceTextures("BLOOD1","BDT_BFL",surface: 1);
			BD_ReplaceTextures("BLOOD2","BDT_BFL",surface: 1);
			BD_ReplaceTextures("BLOOD3","BDT_BFL",surface: 1);
			BD_ReplaceTextures("BLOOD4","BDT_BFL",surface: 1);
			//acid
			BD_ReplaceTextures("SFALL1","BDT_AFA1",surface: 2);
			BD_ReplaceTextures("SFALL2","BDT_AFA1",surface: 2);
			BD_ReplaceTextures("SFALL3","BDT_AFA1",surface: 2);
			BD_ReplaceTextures("SFALL4","BDT_AFA1",surface: 2);
			BD_ReplaceTextures("NUKAGE1","BDT_AFA2",surface: 2);
			BD_ReplaceTextures("NUKAGE2","BDT_AFA2",surface: 2);
			BD_ReplaceTextures("NUKAGE3","BDT_AFA2",surface: 2);
			BD_ReplaceTextures("NUKAGE4","BDT_AFA2",surface: 2);
			BD_ReplaceTextures("NUKAGE1","BDT_AFL",surface: 1);
			BD_ReplaceTextures("NUKAGE2","BDT_AFL",surface: 1);
			BD_ReplaceTextures("NUKAGE3","BDT_AFL",surface: 1);
			BD_ReplaceTextures("NUKAGE4","BDT_AFL",surface: 1);
			//slime 1
			BD_ReplaceTextures("SLIME01","BDT_SFA1",surface: 2);
			BD_ReplaceTextures("SLIME02","BDT_SFA1",surface: 2);
			BD_ReplaceTextures("SLIME03","BDT_SFA1",surface: 2);
			BD_ReplaceTextures("SLIME04","BDT_SFA1",surface: 2);
			BD_ReplaceTextures("SLIME01","BDT_SFL1",surface: 1);
			BD_ReplaceTextures("SLIME02","BDT_SFL1",surface: 1);
			BD_ReplaceTextures("SLIME03","BDT_SFL1",surface: 1);
			BD_ReplaceTextures("SLIME04","BDT_SFL1",surface: 1);
			//slime 2
			BD_ReplaceTextures("SLIME05","BDT_SFA2",surface: 2);
			BD_ReplaceTextures("SLIME06","BDT_SFA2",surface: 2);
			BD_ReplaceTextures("SLIME07","BDT_SFA2",surface: 2);
			BD_ReplaceTextures("SLIME08","BDT_SFA2",surface: 2);
			BD_ReplaceTextures("SLIME05","BDT_SFL2",surface: 1);
			BD_ReplaceTextures("SLIME06","BDT_SFL2",surface: 1);
			BD_ReplaceTextures("SLIME07","BDT_SFL2",surface: 1);
			BD_ReplaceTextures("SLIME08","BDT_SFL2",surface: 1);
			//Boss brain
			BD_ReplaceTextures("DBRAIN1","BDT_DBRN",surface: 2);
			BD_ReplaceTextures("DBRAIN2","BDT_DBRN",surface: 2);
			BD_ReplaceTextures("DBRAIN3","BDT_DBRN",surface: 2);
			BD_ReplaceTextures("DBRAIN4","BDT_DBRN",surface: 2);
		}
		else {
			//lava
			BD_ReplaceTextures("BDT_LFA1", "LFALL1",surface: 2);
			BD_ReplaceTextures("BDT_LFA2", "LAVA1",surface: 2);
			BD_ReplaceTextures("BDT_LFL", "LAVA1",surface: 1);
			//water
			BD_ReplaceTextures("BDT_WFA1", "WFALL1",surface: 2);
			BD_ReplaceTextures("BDT_WFA2", "FWATER1",surface: 2);
			BD_ReplaceTextures("BDT_WFL", "FWATER1",surface: 1);
			//blood
			BD_ReplaceTextures("BDT_BFA1", "BFALL1",surface: 2);
			BD_ReplaceTextures("BDT_BFA2", "BLOOD1",surface: 2);
			BD_ReplaceTextures("BDT_BFL", "BLOOD1",surface: 1);
			//acid
			BD_ReplaceTextures("BDT_AFA1", "SFALL1",surface: 2);
			BD_ReplaceTextures("BDT_AFA2", "NUKAGE1",surface: 2);
			BD_ReplaceTextures("BDT_AFL", "NUKAGE1",surface: 1);
			//slime 1
			BD_ReplaceTextures("BDT_SFA1", "SLIME01",surface: 2);
			BD_ReplaceTextures("BDT_SFL1", "SLIME01",surface: 1);
			//slime 2
			BD_ReplaceTextures("BDT_SFA2", "SLIME05",surface: 2);
			BD_ReplaceTextures("BDT_SFL2", "SLIME05",surface: 1);
			//Boss brain
			BD_ReplaceTextures("BDT_DBRN", "DBRAIN1",surface: 2);
		}
	}
}

// controls the amount of special effect actors, such as gibs, debris, flames
Class BD_FXAmountControl : EventHandler {
	private bool DebrisCleaning;
	Array <BD_BaseDebris> alldebris;
	Array <BD_BaseDebris> bloodlist;
	Array <BD_BaseDebris> giblist;
	Array <BD_BaseDebris> debrislist;
	Array <BD_BaseDebris> flamelist;
	
	override void NetworkProcess(ConsoleEvent e) {
		if (e.name != "BD_ClearDebris" || !e.isManual)
			return;
		if (e.player != net_arbitrator) {
			if (e.player == consoleplayer)
				Console.Printf("Only the host can activate debris cleanup");
			return;
		}
		if (!DebrisCleaning) {
			Console.Printf("Clearing debris");
			DebrisCleaning = true;
		}
	}
	
	//clear the arrays upon map start
	override void WorldLoaded(WorldEvent e) {
		alldebris.Clear();
		bloodlist.Clear();
		giblist.Clear();
		flamelist.Clear();
		debrislist.Clear();
	}

	//add a thing into a corresponding array when it gets spawned
	override void WorldThingSpawned(WorldEvent e) {
		if (e.thing && e.thing.player) {
			if (!e.thing.FindInventory("BD_BloodyPrintControl"))
				e.thing.GiveInventory("BD_BloodyPrintControl",1);
		}			
		if (e.thing && e.thing is "BD_BaseDebris") {
			let a = BD_BaseDebris(e.thing);
			if (a) {
				//console.printf("%s",a.sfxtype);
				if (a.sfxtype == 'blood') {
					alldebris.push(a);
					bloodlist.push(a);
				}
				else if (a.sfxtype == 'gibs') {
					alldebris.push(a);
					giblist.push(a);
				}
				//we're not gonna push flames into alldebris array because it's pointless: everything that spawns flames does so continuously. Better simply disable them.
				else if (a.sfxtype == 'flames')
					flamelist.push(a);					
				else if (a.sfxtype == 'debris') {
					alldebris.push(a);
					debrislist.push(a);
				}
			}
		}
	}

	//remove the thing from the array when it's removed
	override void WorldThingDestroyed(WorldEvent e) {
		if (e.Thing is "BD_BaseDebris") {
			let a = BD_BaseDebris(e.thing);
			if (a) {
				alldebris.delete	(alldebris.Find(a));
				if (a.sfxtype == 'blood')
					bloodlist.delete	(bloodlist.Find(a));					
				else if (a.sfxtype == 'gibs')
					giblist.delete		(giblist.Find(a));					
				else if (a.sfxtype == 'flames')
					flamelist.delete	(flamelist.Find(a));					
				else if (a.sfxtype == 'debris')
					debrislist.delete	(debrislist.Find(a));		
			}
		}	
	}

	//continuously check if the number of FX actors is bigger than the array. if true, delete the oldest actors
	override void WorldTick() {
		if (DebrisCleaning) {
			while (alldebris.Size() > 0) {
				if (alldebris[0])
					alldebris[0].destroy();
			}
			alldebris.Clear();
			DebrisCleaning = false;
			return;				
		}
		//console.printf("blood array size: %d | gib array size: %d",bloodlist.Size(),giblist.Size());
		while (bloodlist.Size() > bdoom_bloodnum)
			bloodlist[0].destroy();			
		while (giblist.Size() > bdoom_gibnum)
			giblist[0].destroy();			
		while (flamelist.Size() > bdoom_flamesnum) 
			flamelist[0].destroy();			
		while (debrislist.Size() > bdoom_debrisnum) 
			debrislist[0].destroy();
	}
}

//attaches footstep actors to players
class BD_FootstepsInit : EventHandler {
    override void PlayerEntered(PlayerEvent e) {
        let steps = BD_Footsteps(Actor.Spawn("BD_Footsteps"));
		if (steps) {
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
		}
	}
}


///////////////
// Compatibility handlers by 3saster 
//////////////

/*	This searches ANIMDEFS and ANIMATED lumps to see if a given texture name is 
	defined in any of those as an animated texture.
	Used for 3D blood pools sprayed on the floor/ceiling: they quickly disappear
	if they land on an animated texture (including liquids).
*/

Class BD_Animated_Handler : StaticEventHandler
{
	// These must be stored as numbers, in order to get the textures
	// from ANIMATED in between the start and end
	// Oddly, we can convert a TextureID to int, but not the other way
	Array<int> animNums;
	
	bool isAnimated(textureID tex)
	{
		return ( animNums.Find(int(tex)) != animNums.Size() );
	}

	override void OnRegister()
	{
		// ANIMATED
		int currLump = Wads.FindLump("ANIMATED",0,1);
		while( currLump != -1 )
		{
			addANIMATED(currLump);
			currLump = Wads.FindLump("ANIMATED",currLump+1,1);
		}
		
		// ANIMDEFS
		currLump = Wads.FindLump("ANIMDEFS",0,1);
		while( currLump != -1 )
		{
			addANIMDEFS(currLump);
			currLump = Wads.FindLump("ANIMDEFS",currLump+1,1);
		}
	}
	
	void addANIMATED(int lump)
	{
		string data = Wads.ReadLump(lump);
		// Read each record
		for(int pos = 0; data.ByteAt(pos) != 255; pos += 23 )
		{
			string start = data.Mid(pos+10,9);
			string end   = data.Mid(pos+1 ,9);
			
			int texStart = int(TexMan.CheckForTexture(start, TexMan.Type_Any));
			int texEnd   = int(TexMan.CheckForTexture(end,   TexMan.Type_Any));
				
			// If animated texture exists and is not in array, add it
			if( texStart > 0 && texEnd > 0 && texStart != texEnd )
				for(int i = texStart; i <= texEnd; i++)
				{
					if( animNums.Find(i) == animNums.Size() )
						animNums.Push(i);
				}
		}
	}
	
	void addANIMDEFS(int lump)
	{
		string data = Wads.ReadLump(lump);
		// Delete comments
		while(data.IndexOf("//") != -1)
		{
			int start = data.IndexOf("//");
			int end   = data.IndexOf("\n",start)+1;
			data.Remove(start,end-start);
		}
		while(data.IndexOf("/*") != -1)
		{
			int start = data.IndexOf("/*");
			int end   = data.IndexOf("*/",start)+2;
			data.Remove(start,end-start);
		}
		// Remove non-space whitespace
		for(int i = 0; i <= 31; i++)
			data.Replace(string.format("%c",i)," ");
		data.Replace(string.format("%c",127)," ");
		// Remove superflous spaces
		string cleandata = data;
		cleandata.Replace("  "," ");
		while(data != cleandata)
		{
			data = cleandata;
			cleandata.Replace("  "," ");
		}
		
		// Tokenize
		Array<String> tokens;
		data.Split(tokens, " ");
		
		// Search for token after texture/flat
		int i = 0;
		while(i < tokens.Size())
		{
			// texture.flat appears as next token; skip that
			if(tokens[i] ~== "warp" || tokens[i] ~== "warp2")
				i += 2;
			// Found an animated texture; read "pic" stuff until another token is found
			else if(tokens[i] ~== "texture" || tokens[i] ~== "flat")
			{
				while( i < tokens.Size() && !(tokens[i] ~== "pic") )
					i++;
				while( i < tokens.Size() && tokens[i] ~== "pic" )
				{
					int texture = int(TexMan.CheckForTexture(tokens[i+1], TexMan.Type_Any));
					if( texture > 0 && animNums.Find(texture) == animNums.Size() )
						animNums.Push(texture);
					i += 4;
				}
			}
			else
				i++;
		}
	}
	
}


// This eventhandler checks for DEHACKED modified monsters in three ways:
// 1. Thing XX
// 2. Frame XX
// 3. Pointer XX
// False positives are possible (false negatives shouldn't be), but should be fairly rare
Class BD_DEHACKED_Handler : StaticEventHandler
{
	// List of likely modified actors
	Array<string> dehackedActors;

	// Was this actor likely modified by DEHACKED?
	bool isDehacked(string classname)
	{
		// Special handling for Hell Knight...
		if(classname ~== "HellKnight")
		{
			return (dehackedActors.Find(classname) != dehackedActors.Size());
		}
		else
		{
			class<Actor> cls = classname;
			for(int i=0; i<dehackedActors.Size(); i++)
			{
				// Must be done this way to check for inheritance
				if(cls && cls is dehackedActors[i])
					return true;
			}
			return false;
		}
	}
	
	override void OnRegister()
	{
		setConstants();
		
		int currLump = Wads.FindLump("DEHACKED",0,1);
		while( currLump != -1 )
		{
			addDEHACKED(currLump);
			currLump = Wads.FindLump("DEHACKED",currLump+1,1);
		}
		/*
		console.printf("-------------------------------");
		for(int i=0; i<dehackedActors.Size(); i++)
			console.printf("%s", dehackedActors[i]);
		console.printf("-------------------------------");
		*/
	}
	
	void addDEHACKED(int lump)
	{
		string data = Wads.ReadLump(lump);
		// Delete comments
		while(data.IndexOf("#") != -1)
		{
			int start = data.IndexOf("#");
			int end   = data.IndexOf("\n",start);
			data.Remove(start,end-start);
		}
		// Split Lines
		Array<String> lines;
		data.Split(lines, "\n");
		
		// Parse each line
		for(int i=0; i<lines.Size(); i++)
		{
			// Remove superflous spaces
			string cleandata = lines[i];
			cleandata.Replace("  "," ");
			while(lines[i] != cleandata)
			{
				lines[i] = cleandata;
				cleandata.Replace("  "," ");
			}
			// Remove leading whitespace
			while( lines[i].length() > 0 && lines[i].Left(1) == " " )
				lines[i].Remove(0,1);
			// Tokenize
			Array<String> tokens;
			lines[i].Split(tokens, " ");
			if( tokens.Size() >= 2) // Thing XX, etc.
			{
				int num = tokens[1].ToInt(10);
				// not a proper number; skip
				if (num < 0)
					continue;
				// Check the number isn't actually 0, since a failed conversion also returns 0
				if (num == 0)
				{
					string s = tokens[1].."1";
					if( s.ToInt(10) == 0 )
						continue;
				}

				if ( tokens[0] ~== "Thing" )
				{
					if( dehackedActors.Find(InfoNames[num]) == dehackedActors.Size() )
						dehackedActors.Push(InfoNames[num]);
				}
				else if ( tokens[0] ~== "Frame" )
				{
					string state = num < 1076 ? StateMap[num] : 'Deh_Actor_250';
					if( dehackedActors.Find(state) == dehackedActors.Size() )
						dehackedActors.Push(state);
				}
				else if ( tokens[0] ~== "Pointer" )
				{
					num = CodePConv[num];
					string state = num < 1076 ? StateMap[num] : 'Deh_Actor_250';
					if( dehackedActors.Find(state) == dehackedActors.Size() )
						dehackedActors.Push(state);
				}
			}
			if( tokens.Size() >= 3 && tokens[0] ~== "Text" && tokens[1] ~== "4" && tokens[1] ~== "4" ) // "Text 4 4" to change a sprite name
			{
				if( i+1<lines.Size() )
				{
					string modActors = spriteMapping.At( lines[i+1].Left(4).MakeUpper() );
					if( modActors.Length () > 0)
					{
						Array<String> actors;
						modActors.Split(actors, ",");
						for(int i=0; i<actors.Size(); i++)
						{
							if( dehackedActors.Find(actors[i]) == dehackedActors.Size() )
								dehackedActors.Push(actors[i]);
						}
					}
				}
			}
		}
	}
}

Class BD_WeaponHelpHandler : EventHandler {
	ui bool ShowWeapHelp;
    override void consoleProcess(ConsoleEvent e) {
		if (e.name != "BD_ShowWeapHelp")
			return;
		if (bdoom_weapons != 0) {
			ShowWeapHelp = !ShowWeapHelp;
			if (ShowWeapHelp)
				S_StartSound("menu/showhelp",CHAN_AUTO,volume:0.5);
			else
				S_StartSound("menu/hidehelp",CHAN_AUTO,volume:0.5);
		}
		else {			
			ShowWeapHelp = false;
		}
    }
    override void renderOverlay(RenderEvent e) {
        if (ShowWeapHelp) {
			if (bdoom_weapons < 1)
				return;
			PlayerInfo player	= players[consoleplayer];
			PlayerPawn mo		= player.mo;
			if (!player || !player.readyweapon || !mo)
				return;			
            let weap = player.readyWeapon.GetClassName();
			if (!weap)
				return;
			if (bdoom_weapons < 1)
				return;
			string title;
			string	desc;
			string note;
			int mainofs = 50;
			int statofs1 = 1000;
			int statofs2 = 1270;
			int yofs = 180;
			int fillheight = 420;
			if (bdoom_weapons == 1) {
				string attack1;	string atkrate1;	string damage1;	string type1;	string prspeed1; string blastarea1;
				string attack2;	string atkrate2;	string damage2;	string type2;	string prspeed2; string blastarea2;
				switch (weap) {
					case 'BD_Fist' : 
					title 		= "Fist";
					desc		= "Fist with a knuckleduster. Faster than Vanilla.\nDoesn't alert enemies that weren't hit.\nYou can also use your boot to kick enemies.";
					attack1 	= "Punch";		atkrate1 	= "2.5 hits/sec";		damage1 	= "2-20";			type1 		= "Melee";
					attack2 	= "Kick";		atkrate2 	= "1.6 hits/sec";		damage2 	= "15-36";			type2 		= type1;
					note		= "Kicking pushes monsters away.\nIt also slightly slows you down\nunless you do it while jumping.";
					break;
					
					case 'BD_Chainsaw' : 
					title 		= "Chainsaw";
					desc		= "Your classic chainsaw. Doesn’t pull you\ntowards the target, allowing for easier\nmovement.";
					attack1 	= "Saw attack";		atkrate1 	= "8.75 hits/sec";	damage1 	= "2-20";			type1 		= "Melee";
					break;
					
					case 'BD_Pistol' : 
					if (mo.CountInv('BD_Pistol') <= 1) {
						title 		= "Pistol";
						desc		= "Basic pistol, slightly faster than its\nVanilla counterpart.\nCan be equipped and unequipped fairly quickly.";
						attack1 	= "Fire pistol";		atkrate1 	= "2.9 shots/sec";	damage1 	= "5-15";			type1 		= "Hitscan";
						note		= "Can be dual-wielded if you get a second pistol\nfrom a Zombieman.";
					}
					else {
						title 		= "Dual Pistols";
						desc		= "Basic pistols, slightly faster than their\nVanilla counterpart.\nCan be equipped and unequipped fairly quickly.";
						attack1 	= "Fire one pistol";		atkrate1 	= "2.9 shots/sec";	damage1 	= "5-15";			type1 		= "Hitscan";
						attack2 	= "Dual fire";				atkrate2 	= "5.8 shots/sec";	damage2 	= "5-15";			type2 		= type1;
						note		= "You need a moment to aim the guns before you\ncan start using the secondary attack.\nDual-wielding has reduced accuracy.";
					}
					break;
					
					case 'BD_Shotgun' : 
					title 		= "Pump Shotgun";
					desc		= "Classic Shotgun with an added melee attack.";
					attack1 	= "Fire shotgun";		atkrate1 	= "0.94 shots/sec";	damage1 	= "35-105 (7 x 5-15)";			type1 		= "Hitscan";
					attack2 	= "Buttstock melee";	atkrate2 	= "1.3 hits/sec";		damage2 	= "18-36 (42-252 with Berserk)";	type2 		= "Melee";
					note		= "Melee animation can be quickly cancelled into\na shot, allowing for an efficient combo.";
					break;
					
					case 'BD_SuperShotgun' : 
					title 		= "Super Shotgun";
					desc		= "Classic double-barreled Shotgun that can\nfire 1 or 2 shells simultaneously.";
					attack1 	= "Fire both barrels";		atkrate1 	= "0.61 shots/sec";				damage1 	= "100-300 (20 x 5-15)";	type1 		= "Hitscan";
					attack2 	= "Fire one barrel";			atkrate2 	= "3.5 shots/sec (w/o reload)";	damage2 	= "50-150 (10 x 5-15)";	type2 		= type1;
					note		= "Press the ‘Reload’ button to reload 1 shell\nafter firing once.";
					break;
					
					case 'BD_Chaingun' : 
					title 		= "Chaingun";
					desc		= "Classic Chaingun with rapid-fire mode\nas a secondary attack.";
					attack1 	= "Fire (normal speed)";		atkrate1 	= "8.75 shots/sec";	damage1 	= "5-15";	type1 		= "Hitscan";
					attack2 	= "Rapid fire";			atkrate2 	= "17.5 shots/sec";	damage2 	= damage1;	type2 		= type1;
					note		= "The gun needs to cool down after rapid fire.\nThe cooldown is forced after 60 shots but\nit’ll be shorter if you cease firing before that.";
					break;
					
					case 'BD_RocketLauncher' : 
					title 		= "Rocket Launcher";
					desc		= "Classic Rocket Launcher that can fire homing\nrockets as a secondary attack.";
					attack1 	= "Fire rocket";		atkrate1 	= "2.33 shots/sec";	damage1 	= "20-160 + 128 (impact + blast)";	type1 	= "Projectile, explosive, linear";
					prspeed1	= "20";		blastarea1 = "128";
					attack2 	= "Fire homing rocket";		atkrate2 	= "0.94 shots/sec";	damage2 	= damage1;	type2 	= "Projectile, explosive, homing";
					prspeed2	= "17";		blastarea2 = blastarea1;
					break;
					
					case 'BD_PlasmaRifle' : 
					title 		= "Plasma Rifle";
					desc		= "Classic Plasma Rifle with a railgun mode.";
					attack1 	= "Fire plasma orbs";		atkrate1 	= "11.67 shots/sec";	damage1 	= "5-40";		type1 	= "Projectile, linear"; prspeed1	= "25";
					attack2 	= "Fire railgun";			atkrate2 	= "0.81 shots/sec";	damage2 	= "250-625";	type2 	= "Railgun, non-piercing";
					note		= "Secondary Attack has a 0.4-second\ncharge-up; make sure to track your target\ncarefully.";
					break;
					
					case 'BD_BFG9000' : 
					title 		= "BFG 9000";
					desc		= "Classic BFG 9000 with a new attack mode.";
					attack1 	= "Fire BFG orb";				atkrate1 	= "0.87 shots/sec";	damage1 	= "100-800 + 40x???";		type1 	= "Projectile, linear, tracing"; prspeed1	= "25";
					attack2 	= "Channel plasma beam";		atkrate2 	= "Continuous";	damage2 	= "approx. 700/sec";	type2 	= "Railgun, piercing";
					note		= "After firing 100 cells in the secondary attack\nmode, the gun will be forced to cool down.\nThe cooldown will be shorter if you stop\nfiring before that happens.";
					break;
				}
				if (prspeed1)		fillheight += 20;
				if (blastarea1)	fillheight += 20;
				if (prspeed2)		fillheight += 20;
				if (blastarea2)	fillheight += 20;
				if (!note && !attack2)	fillheight -= 150;
				BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
				if (attack1) {
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",attack1,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Atk. Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",atkrate1,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",damage1,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",type1,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}	
				if (prspeed1) {
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Proj. speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",prspeed1,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}
				if (blastarea1) {
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Blast area",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",blastarea1,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}
				if (attack2) {
					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",attack2,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Atk. Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",atkrate2,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",damage2,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",type2,			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}
				if (prspeed2) {
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Proj. Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",prspeed2,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}
				if (blastarea2) {
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Blast area",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5));
					BD_StatusBarScreen.DrawString("UNRLC",blastarea2,		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5));
				}
			}
			else if (bdoom_weapons == 2) {
				switch (weap) {
					case 'BD_Fist' : 
					fillheight += 30;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "CQC";
					desc = "Raise Combo Counter (CC) with Primary.\nCC changes your Secondary. Finishers reset CC.\nKick can be added after finishers.";
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Light Left Punch (+1 CC)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Atk. Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","up to 4.3 hits/sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","6-24",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","CC0: Slow punch\nCC1: Fast punch\nCC2: Heavy punch\nCC3+: Uppercut (finisher)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	
					yofs += 30*4;				
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","15-52",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Kick",			(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Heavy kick (finisher+)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	
					yofs += 30;				
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","30-55",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					note = "CC defines fist & kick damage and kick range.\n5 Light Punches in a row will reset CC.\n\nAs long as you keep punching an enemy,\nyour chance to stunlock them will increase.";
					break;
					
					case 'BD_Chainsaw' : 
					fillheight += 90;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Chainsaw";
					desc = "Powerful chainsaw with a high chance to\nstunlock the target. Gets jammed easily.";
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Saw attack (chance to jam)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Atk. Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","17.5 hits/sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","6-24",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Melee, high stunlock",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Rev (pushes out blood)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
																			
					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Any",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","(when off) Pull starter",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	
					
					note = "Attacking enemies covers the blade with blood.\nThe more there is, the higher is the chance\nfor the chainsaw to jam.\nThe more bloodied the saw, the harder it'll be\nto restart.\nSecondary attack pushes blood out, cleaning\nthe blade.";
					break;
					
					case 'BD_Pistol' : 
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Pistol";
					desc = "Modern Pistol with high fire rate and\nstopping power.";					
					BD_StatusBarScreen.DrawString("UNRLC","Magazine",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","15",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Reload Time",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","1.29 sec",		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire pistol (semi-auto)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","up to 8.75 shots/sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Base Damage",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","15",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Bullet, medium DMG falloff",			
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Best Range",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","< 512",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Bullet Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","170",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);					
					break;
					
					case 'BD_Shotgun' : 
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Shotgun";
					desc = "Modern Shotgun with high stopping power.";					
					BD_StatusBarScreen.DrawString("UNRLC","Magazine",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","8",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Reload Time",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","1.05 sec (+0.35s per shell)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire shotgun (semi-auto)",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","up to 1.3 shots/sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Base Damage",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","12 x 7",		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Pellet, high DMG falloff",			
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Best Range",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","< 400",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Pellet Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","140",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	

					note = "Reloading with am empty magazine takes longer,\nbecause you'll have to pump the shotgun\nafter loading the first shell.";
					break;
					
					case 'BD_SuperShotgun' : 
					fillheight += 100;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Sawed-Off Shotgun";
					desc = "Quick-draw double-barrelled sawed-off shotgun.\nHigh power, low accuracy and range.";					
					BD_StatusBarScreen.DrawString("UNRLC","Magazine",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","2",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Reload Time",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","1.48s (1 shell) / 1.86s (full)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire both barrels",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire one barrel", (statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
																			
					yofs += 60;
					BD_StatusBarScreen.DrawString("UNRLC","Base Damage",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","12 x 12 (per shell)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Pellet, piercing,\nvery high DMG falloff",			
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30*2;
					BD_StatusBarScreen.DrawString("UNRLC","Best Range",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","< 300",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Pellet Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","140",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	

					note = "Pellets can pierce enemies. The efficiency of\npiercing depends on the target's health.\n\nYou can fire after loading only one shell.\n\nSometimes it's better to switch to a different\nweapon than spend time reloading.";
					break;
					
					case 'BD_Chaingun' : 
					fillheight += 100;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Assault Rifle";
					desc = "An assault rifle with good range and damage\nand a reflex sight for longer ranges.";					
					BD_StatusBarScreen.DrawString("UNRLC","Magazine",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","40",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Reload Time",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","1.54 sec (+1s if dry)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","(Hip) Automatic fire\n(ADS) 3-round burst",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
																			
					yofs += 30*2;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","(Hip) 8.75 shots/sec\n(ADS) 7 shots/sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
																			
					yofs += 40*2;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Toggle hip/ADS", (statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
																			
					yofs += 60;
					BD_StatusBarScreen.DrawString("UNRLC","Base Damage",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","15",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Bullet, low DMG falloff",			
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Best Range",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","< 640",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Bullet Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","230",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);	

					note = "Aiming down sights (ADS) provides zoom and\nreduces spread but it also slows your\nmovement by 20% and switches the weapon\ninto a 3-round burst mode.";
					break;
					
					case 'BD_RocketLauncher' : 
					fillheight += 100;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Rocket & Grenade Launcher";
					desc = "Drum-loaded multi-purpose platform\nthat can fire rockets and grenades.";					
					BD_StatusBarScreen.DrawString("UNRLC","Magazine",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","8",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Reload Time",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","1.89 sec",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);

					yofs += 50;
					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire rocket",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Projectile, explosive, linear",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Proj. Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","25 (initial) / 51.8 (max) ",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
																			
					yofs += 40;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire grenade", (statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Projectile, explosive, bouncing",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Proj. Speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","25 (initial)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
																			
					yofs += 60;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","20-160 + 128 (impact + blast)",				
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Blast Area",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","128",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);					
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","up to 1.75 shots/sec",			
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					note = "Rockets gain speed during flight.\n\nGrenades will beep and flash before exploding.\n\nRockets and grenades deal the same damage.";
					break;
					
					case 'BD_PlasmaRifle' : 
					fillheight += 60;
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "Plasma Rifle";
					desc = "Plasma Rifle that deals damage over a small\narea. Projectiles have noticeable spread.";					

					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Fire plasma orbs",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","8.75 shots/sec",(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Damage",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","30",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Blast Area",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","40",				(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Type",			(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Projectile, explosive, linear",	
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 40;
					BD_StatusBarScreen.DrawString("UNRLC","Secondary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","Manual Cooldown", (statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Duration",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","0.06-0.57 sec",(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					
					note = "Duration of manual cooldown depends on how\nmuch heat was accumulated.\nAfter approx. 60 continuous shots the gun will\nbe forced to cool down.\nForced cooldown has a fixed duration of 1.66 sec.";
					break;
					
					case 'BD_BFG9000' : 
					statofs2 = 1320;
					fillheight += 210;					
					BD_StatusBarScreen.Fill("404040",30,80,1850,fillheight, 0.85);
					title = "BFG 9000";
					desc = "Powered-up BFG that allows the shooter to\ncontrol the power of the shot. Hold the attack\nbutton to change the power of the attack.";					

					BD_StatusBarScreen.DrawString("UNRLC","Primary",		(statofs1,yofs),translation:Font.CR_ORANGE,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","(Hold) Charge\n(Release) Fire BFG",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30*2;
					BD_StatusBarScreen.DrawString("UNRLC","Fire Rate",		(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","0.5-1.1 shots/sec",(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Orb Blast DMG",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","60-480",		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Orb Blast Area",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","92-288",		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Beam Damage",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","52–206 (per beam)",		
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","Beam Range",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","256-1280",		(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30;
					BD_StatusBarScreen.DrawString("UNRLC","# of Targets",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","6-14",			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					yofs += 30*2;
					BD_StatusBarScreen.DrawString("UNRLC","Proj. speed",	(statofs1,yofs),translation:Font.CR_GREEN,scale:(1.5,1.5),linespacing:10);
					BD_StatusBarScreen.DrawString("UNRLC","7-21 (initial), slows down to 0",
																			(statofs2,yofs),translation:Font.CR_GOLD,scale:(1.5,1.5),linespacing:10);
					
					
					note = "There are 8 levels of charge.\nThe charge determines:\n- Orb initial speed\n- Orb explosion damage\n- Orb explosion radius\n- Number of beam targets\n- Damage per beam\n- Max beam range\n\nThe greater the charge, the longer you\nneed to hold Fire button to reach it.";
					break;
				}
			}
			BD_StatusBarScreen.DrawString("MM2FONTO",title,			(mainofs,100),translation:Font.CR_ORANGE,scale:(1.5,1.5));
			BD_StatusBarScreen.DrawString("UNRLC",desc, 				(mainofs,180),translation:Font.CR_GREY,scale:(1.5,1.5),linespacing:10);
			BD_StatusBarScreen.DrawString("MM2FONTO","STATS", 			(statofs1+300,100),translation:Font.CR_GREY,scale:(1.5,1.5),linespacing:10);
			if (note) {
				BD_StatusBarScreen.DrawString("UNRLC","NOTES:",		(mainofs,330),translation:Font.CR_GREEN,scale:(1.5,1.5));
				BD_StatusBarScreen.DrawString("UNRLC",note,				(mainofs,370),translation:Font.CR_GREY,scale:(1.5,1.5),linespacing:10);
			}
			BD_StatusBarScreen.Fill("04ac33",30,80,800,4,0.85);				//top left
			BD_StatusBarScreen.Fill("04ac33",1080,80,800,4,0.85);				//top right
			BD_StatusBarScreen.Fill("04ac33",30,fillheight+76,1850,4,0.85);	//bottom
			BD_StatusBarScreen.Fill("04ac33",30,82,4,fillheight-6,0.85);		//left
			BD_StatusBarScreen.Fill("04ac33",1876,82,4,fillheight-6,0.85);	//right
			BD_StatusBarScreen.Fill("04ac33",980,100,4,fillheight-32,0.4);	//middle
			BD_StatusBarScreen.DrawString("UNRLC","WEAPON INFO",		(837, 70),translation:Font.CR_GREEN,scale:(1.5,1.5));
        }
    }
}